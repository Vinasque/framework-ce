// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_event_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_event_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_event_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_event_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_event_2eproto;
namespace events {
class Ack;
struct AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
}  // namespace events
PROTOBUF_NAMESPACE_OPEN
template<> ::events::Ack* Arena::CreateMaybeMessage<::events::Ack>(Arena*);
template<> ::events::Event* Arena::CreateMaybeMessage<::events::Event>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace events {

// ===================================================================

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:events.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit PROTOBUF_CONSTEXPR Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Event& from) {
    Event::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "events.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlightIdFieldNumber = 1,
    kSeatFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kCustomerNameFieldNumber = 4,
    kStatusFieldNumber = 5,
    kPaymentMethodFieldNumber = 6,
    kReservationTimeFieldNumber = 7,
    kPriceFieldNumber = 8,
    kTimestampFieldNumber = 9,
  };
  // string flight_id = 1;
  void clear_flight_id();
  const std::string& flight_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flight_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flight_id();
  PROTOBUF_NODISCARD std::string* release_flight_id();
  void set_allocated_flight_id(std::string* flight_id);
  private:
  const std::string& _internal_flight_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flight_id(const std::string& value);
  std::string* _internal_mutable_flight_id();
  public:

  // string seat = 2;
  void clear_seat();
  const std::string& seat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seat();
  PROTOBUF_NODISCARD std::string* release_seat();
  void set_allocated_seat(std::string* seat);
  private:
  const std::string& _internal_seat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seat(const std::string& value);
  std::string* _internal_mutable_seat();
  public:

  // string user_id = 3;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string customer_name = 4;
  void clear_customer_name();
  const std::string& customer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_name();
  PROTOBUF_NODISCARD std::string* release_customer_name();
  void set_allocated_customer_name(std::string* customer_name);
  private:
  const std::string& _internal_customer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_name(const std::string& value);
  std::string* _internal_mutable_customer_name();
  public:

  // string status = 5;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string payment_method = 6;
  void clear_payment_method();
  const std::string& payment_method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payment_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payment_method();
  PROTOBUF_NODISCARD std::string* release_payment_method();
  void set_allocated_payment_method(std::string* payment_method);
  private:
  const std::string& _internal_payment_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payment_method(const std::string& value);
  std::string* _internal_mutable_payment_method();
  public:

  // string reservation_time = 7;
  void clear_reservation_time();
  const std::string& reservation_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reservation_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reservation_time();
  PROTOBUF_NODISCARD std::string* release_reservation_time();
  void set_allocated_reservation_time(std::string* reservation_time);
  private:
  const std::string& _internal_reservation_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reservation_time(const std::string& value);
  std::string* _internal_mutable_reservation_time();
  public:

  // string price = 8;
  void clear_price();
  const std::string& price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // int64 timestamp = 9;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:events.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flight_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seat_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_method_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reservation_time_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class Ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:events.Ack) */ {
 public:
  inline Ack() : Ack(nullptr) {}
  ~Ack() override;
  explicit PROTOBUF_CONSTEXPR Ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ack(const Ack& from);
  Ack(Ack&& from) noexcept
    : Ack() {
    *this = ::std::move(from);
  }

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ack& operator=(Ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
               &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ack& a, Ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ack& from) {
    Ack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "events.Ack";
  }
  protected:
  explicit Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:events.Ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// string flight_id = 1;
inline void Event::clear_flight_id() {
  _impl_.flight_id_.ClearToEmpty();
}
inline const std::string& Event::flight_id() const {
  // @@protoc_insertion_point(field_get:events.Event.flight_id)
  return _internal_flight_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_flight_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.flight_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:events.Event.flight_id)
}
inline std::string* Event::mutable_flight_id() {
  std::string* _s = _internal_mutable_flight_id();
  // @@protoc_insertion_point(field_mutable:events.Event.flight_id)
  return _s;
}
inline const std::string& Event::_internal_flight_id() const {
  return _impl_.flight_id_.Get();
}
inline void Event::_internal_set_flight_id(const std::string& value) {
  
  _impl_.flight_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_flight_id() {
  
  return _impl_.flight_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_flight_id() {
  // @@protoc_insertion_point(field_release:events.Event.flight_id)
  return _impl_.flight_id_.Release();
}
inline void Event::set_allocated_flight_id(std::string* flight_id) {
  if (flight_id != nullptr) {
    
  } else {
    
  }
  _impl_.flight_id_.SetAllocated(flight_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.flight_id_.IsDefault()) {
    _impl_.flight_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:events.Event.flight_id)
}

// string seat = 2;
inline void Event::clear_seat() {
  _impl_.seat_.ClearToEmpty();
}
inline const std::string& Event::seat() const {
  // @@protoc_insertion_point(field_get:events.Event.seat)
  return _internal_seat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_seat(ArgT0&& arg0, ArgT... args) {
 
 _impl_.seat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:events.Event.seat)
}
inline std::string* Event::mutable_seat() {
  std::string* _s = _internal_mutable_seat();
  // @@protoc_insertion_point(field_mutable:events.Event.seat)
  return _s;
}
inline const std::string& Event::_internal_seat() const {
  return _impl_.seat_.Get();
}
inline void Event::_internal_set_seat(const std::string& value) {
  
  _impl_.seat_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_seat() {
  
  return _impl_.seat_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_seat() {
  // @@protoc_insertion_point(field_release:events.Event.seat)
  return _impl_.seat_.Release();
}
inline void Event::set_allocated_seat(std::string* seat) {
  if (seat != nullptr) {
    
  } else {
    
  }
  _impl_.seat_.SetAllocated(seat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.seat_.IsDefault()) {
    _impl_.seat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:events.Event.seat)
}

// string user_id = 3;
inline void Event::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& Event::user_id() const {
  // @@protoc_insertion_point(field_get:events.Event.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:events.Event.user_id)
}
inline std::string* Event::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:events.Event.user_id)
  return _s;
}
inline const std::string& Event::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void Event::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_user_id() {
  // @@protoc_insertion_point(field_release:events.Event.user_id)
  return _impl_.user_id_.Release();
}
inline void Event::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:events.Event.user_id)
}

// string customer_name = 4;
inline void Event::clear_customer_name() {
  _impl_.customer_name_.ClearToEmpty();
}
inline const std::string& Event::customer_name() const {
  // @@protoc_insertion_point(field_get:events.Event.customer_name)
  return _internal_customer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_customer_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.customer_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:events.Event.customer_name)
}
inline std::string* Event::mutable_customer_name() {
  std::string* _s = _internal_mutable_customer_name();
  // @@protoc_insertion_point(field_mutable:events.Event.customer_name)
  return _s;
}
inline const std::string& Event::_internal_customer_name() const {
  return _impl_.customer_name_.Get();
}
inline void Event::_internal_set_customer_name(const std::string& value) {
  
  _impl_.customer_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_customer_name() {
  
  return _impl_.customer_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_customer_name() {
  // @@protoc_insertion_point(field_release:events.Event.customer_name)
  return _impl_.customer_name_.Release();
}
inline void Event::set_allocated_customer_name(std::string* customer_name) {
  if (customer_name != nullptr) {
    
  } else {
    
  }
  _impl_.customer_name_.SetAllocated(customer_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.customer_name_.IsDefault()) {
    _impl_.customer_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:events.Event.customer_name)
}

// string status = 5;
inline void Event::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& Event::status() const {
  // @@protoc_insertion_point(field_get:events.Event.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:events.Event.status)
}
inline std::string* Event::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:events.Event.status)
  return _s;
}
inline const std::string& Event::_internal_status() const {
  return _impl_.status_.Get();
}
inline void Event::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_status() {
  // @@protoc_insertion_point(field_release:events.Event.status)
  return _impl_.status_.Release();
}
inline void Event::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:events.Event.status)
}

// string payment_method = 6;
inline void Event::clear_payment_method() {
  _impl_.payment_method_.ClearToEmpty();
}
inline const std::string& Event::payment_method() const {
  // @@protoc_insertion_point(field_get:events.Event.payment_method)
  return _internal_payment_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_payment_method(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payment_method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:events.Event.payment_method)
}
inline std::string* Event::mutable_payment_method() {
  std::string* _s = _internal_mutable_payment_method();
  // @@protoc_insertion_point(field_mutable:events.Event.payment_method)
  return _s;
}
inline const std::string& Event::_internal_payment_method() const {
  return _impl_.payment_method_.Get();
}
inline void Event::_internal_set_payment_method(const std::string& value) {
  
  _impl_.payment_method_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_payment_method() {
  
  return _impl_.payment_method_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_payment_method() {
  // @@protoc_insertion_point(field_release:events.Event.payment_method)
  return _impl_.payment_method_.Release();
}
inline void Event::set_allocated_payment_method(std::string* payment_method) {
  if (payment_method != nullptr) {
    
  } else {
    
  }
  _impl_.payment_method_.SetAllocated(payment_method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payment_method_.IsDefault()) {
    _impl_.payment_method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:events.Event.payment_method)
}

// string reservation_time = 7;
inline void Event::clear_reservation_time() {
  _impl_.reservation_time_.ClearToEmpty();
}
inline const std::string& Event::reservation_time() const {
  // @@protoc_insertion_point(field_get:events.Event.reservation_time)
  return _internal_reservation_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_reservation_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reservation_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:events.Event.reservation_time)
}
inline std::string* Event::mutable_reservation_time() {
  std::string* _s = _internal_mutable_reservation_time();
  // @@protoc_insertion_point(field_mutable:events.Event.reservation_time)
  return _s;
}
inline const std::string& Event::_internal_reservation_time() const {
  return _impl_.reservation_time_.Get();
}
inline void Event::_internal_set_reservation_time(const std::string& value) {
  
  _impl_.reservation_time_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_reservation_time() {
  
  return _impl_.reservation_time_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_reservation_time() {
  // @@protoc_insertion_point(field_release:events.Event.reservation_time)
  return _impl_.reservation_time_.Release();
}
inline void Event::set_allocated_reservation_time(std::string* reservation_time) {
  if (reservation_time != nullptr) {
    
  } else {
    
  }
  _impl_.reservation_time_.SetAllocated(reservation_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reservation_time_.IsDefault()) {
    _impl_.reservation_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:events.Event.reservation_time)
}

// string price = 8;
inline void Event::clear_price() {
  _impl_.price_.ClearToEmpty();
}
inline const std::string& Event::price() const {
  // @@protoc_insertion_point(field_get:events.Event.price)
  return _internal_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_price(ArgT0&& arg0, ArgT... args) {
 
 _impl_.price_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:events.Event.price)
}
inline std::string* Event::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:events.Event.price)
  return _s;
}
inline const std::string& Event::_internal_price() const {
  return _impl_.price_.Get();
}
inline void Event::_internal_set_price(const std::string& value) {
  
  _impl_.price_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_price() {
  
  return _impl_.price_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_price() {
  // @@protoc_insertion_point(field_release:events.Event.price)
  return _impl_.price_.Release();
}
inline void Event::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  _impl_.price_.SetAllocated(price, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.price_.IsDefault()) {
    _impl_.price_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:events.Event.price)
}

// int64 timestamp = 9;
inline void Event::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t Event::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t Event::timestamp() const {
  // @@protoc_insertion_point(field_get:events.Event.timestamp)
  return _internal_timestamp();
}
inline void Event::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void Event::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:events.Event.timestamp)
}

// -------------------------------------------------------------------

// Ack

// string message = 1;
inline void Ack::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Ack::message() const {
  // @@protoc_insertion_point(field_get:events.Ack.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ack::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:events.Ack.message)
}
inline std::string* Ack::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:events.Ack.message)
  return _s;
}
inline const std::string& Ack::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Ack::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Ack::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Ack::release_message() {
  // @@protoc_insertion_point(field_release:events.Ack.message)
  return _impl_.message_.Release();
}
inline void Ack::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:events.Ack.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace events

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_event_2eproto
